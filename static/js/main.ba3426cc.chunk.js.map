{"version":3,"sources":["logo.svg","components/TodoItem.jsx","components/TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","positionLi","display","justifyContent","border","padding","marginBottom","borderRadius","alignItems","background","TodoItem","item","onRemove","useState","completed","setCompleted","useEffect","console","log","style","className","textDecoration","color","icon","faGripLinesVertical","title","onClick","faCheckCircle","faTrash","id","TodoList","todos","Container","marginTop","Row","Col","lg","width","margin","map","key","App","setTodos","todoTitle","setTodoTitle","textAlign","paddingTop","borderBottom","type","value","onChange","e","target","onKeyPress","event","Date","now","newList","filter","todo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ba3426cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGripLinesVertical, faTrash, faCheckCircle } from '@fortawesome/free-solid-svg-icons'\nimport { useState } from 'react'\n\nconst positionLi = {\n    display: 'flex',\n    justifyContent: 'space-between',\n    border: '1px solid grey',\n    padding: '10px 20px',\n    marginBottom: '10px',\n    borderRadius: '5px',\n    alignItems: 'center',\n    background: '#fff'\n}\n\nexport default function TodoItem({item, onRemove}) {\n\n const [completed, setCompleted] = useState(false)\n//  console.log(completed)\n\n useEffect(() => {\n     console.log('rendered')\n })\n    return( \n        <>\n        <div style={positionLi}>\n       \n            <li className='item-to-do' style={{textDecoration: completed ? 'line-through' : ''}}><FontAwesomeIcon className='mr-2' style={{color: 'brown'}} icon={faGripLinesVertical} /> {item.title}</li>\n          <div style={{display:'flex', alignItems: 'center'}}>\n             \n            <button className='btn btn-done'>\n                { !completed ?  \n                <div    onClick={() => setCompleted(!completed)}>\n                   <FontAwesomeIcon style={{color: 'brown'}} \n                                    icon={faCheckCircle}\n                                /> \n                </div>  \n                :\n                                 null }\n               \n            </button>\n         \n            <button className='btn btn-delete'><FontAwesomeIcon style={{color: 'brown'}} \n                                                                icon={faTrash}\n                                                                onClick={() => onRemove(item.id)}\n                                                                /></button>\n         </div>\n\n       \n        </div>\n        </>\n    )\n}","import React, { Component } from 'react'\nimport { Container, Col, Row } from 'react-bootstrap'\nimport TodoItem from './TodoItem'\nexport default function TodoList({todos, onRemove}) {\n  \n    return (\n        <Container style={{marginTop: '10px'}}>\n            <Row>\n                <Col lg={12}>\n                    <ul className='list-unstyled' style={{width: '50%', margin: '0 auto'}}>\n                        {todos.map( item => {\n                            return (\n                              <TodoItem key={item.id} item={item} onRemove={onRemove}/>\n                         \n                            )\n                        })}\n                    </ul>\n                </Col>\n            </Row>\n        </Container>\n    )\n}","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Col, Row } from 'react-bootstrap'\nimport TodoList from './components/TodoList'\nimport ReactDOM from 'react-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {faPlusCircle } from '@fortawesome/free-solid-svg-icons'\n\n\n\nfunction App () {\n  const [todos, setTodos] = useState ([\n    { id: 1, title: 'read book', completed: false},\n    { id: 2, title: 'write essay', completed: false},\n    { id: 3, title: 'go to the gym', completed: false}\n\n  ])\n  const [todoTitle, setTodoTitle] = useState('')\n  const addTodo = event => {\n    if (event.key === 'Enter') {\n       setTodos([\n         ...todos,\n         {\n           id: Date.now(),\n           title: todoTitle,\n           completed: false,\n           \n         }\n\n       ])\n       setTodoTitle('')\n    }\n  }\n\n   const removeTodo = (id) =>  { \n    //  setTodos([\n    //       ...todos,\n    //      todos.filter((todo) => todo.id != id )\n    //   ])\n    const newList =  todos.filter((todo) => todo.id != id )\n    setTodos(newList)\n   }\n\n  // let removedId;\n    return (\n\n      <div className=\"container\" >\n          \n            <Row>\n            <Col lg={12} >\n              <h3 className='mb-5' style={{textAlign: 'center', paddingTop: '80px'}}>Todo list</h3>\n            </Col>\n            </Row>\n            <Row className='target-line' style={{width: '48%', margin: '0 auto', borderBottom: '1px solid grey'}}>\n              <Col lg={12}> \n                 <small className='t' style={{width: '100%'}}>New todo</small>\n                <input className='input-field' \n                       type='text'  \n                       value={todoTitle} \n                       onChange={e => setTodoTitle(e.target.value)}\n                       onKeyPress={addTodo}\n                />\n                {/* <button className='btn-add'><FontAwesomeIcon style={{color: 'brown'}} icon={faPlusCircle} /></button> */}\n              </Col>\n            </Row>\n            <Row>\n            <TodoList todos={todos} onRemove={removeTodo}/>\n          </Row>\n  \n      </div>\n    );\n  \n  \n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}